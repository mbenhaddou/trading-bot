# .github/workflows/deploy.yml
name: Build and Deploy Trading Bot

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Manual trigger
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/trading-bot

jobs:
  # ============================================================================
  # JOB 1: Build and Test
  # ============================================================================
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for versioning
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=autonomous_trading_bot --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
  
  # ============================================================================
  # JOB 2: Build Docker Images (Multi-platform)
  # ============================================================================
  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
  
  # ============================================================================
  # JOB 3: Deploy to Environment
  # ============================================================================
  deploy:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    strategy:
      matrix:
        environment: [development, staging, production]
    
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up deployment configuration
        id: config
        run: |
          case "${{ matrix.environment }}" in
            development)
              echo "replicas=1" >> $GITHUB_OUTPUT
              echo "resources_cpu=0.5" >> $GITHUB_OUTPUT
              echo "resources_memory=512Mi" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "replicas=2" >> $GITHUB_OUTPUT
              echo "resources_cpu=1" >> $GITHUB_OUTPUT
              echo "resources_memory=1Gi" >> $GITHUB_OUTPUT
              ;;
            production)
              echo "replicas=3" >> $GITHUB_OUTPUT
              echo "resources_cpu=2" >> $GITHUB_OUTPUT
              echo "resources_memory=2Gi" >> $GITHUB_OUTPUT
              ;;
          esac
      
      - name: Deploy to environment
        id: deploy
        run: |
          echo "Deploying version ${{ needs.build-docker.outputs.version }} to ${{ matrix.environment }}"
          echo "Image: ${{ needs.build-docker.outputs.tags }}"
          echo "Replicas: ${{ steps.config.outputs.replicas }}"
          
          # Add your actual deployment commands here
          # Examples:
          # - kubectl apply -f k8s/
          # - docker-compose up -d
          # - aws ecs update-service
          
          echo "url=https://${{ matrix.environment }}.trading-bot.example.com" >> $GITHUB_OUTPUT
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment health..."
          # Add health check commands
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ matrix.environment }}: ${{ job.status }}
            Version: ${{ needs.build-docker.outputs.version }}
            Environment: ${{ matrix.environment }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================================================
  # JOB 4: Create GitHub Release
  # ============================================================================
  create-release:
    needs: [build-docker, deploy]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog between last two tags
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "^${CURRENT_TAG}$" | tail -1)
          
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${CURRENT_TAG})
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..${CURRENT_TAG})
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## Changes in this Release
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            
            ```bash
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-docker.outputs.version }}
            ```
            
            ## Deployed Environments
            
            - ✅ Development
            - ✅ Staging
            - ✅ Production
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
